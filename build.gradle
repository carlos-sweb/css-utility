import groovy.json.JsonSlurper 

tasks.register('screen'){
	doLast {

		println "hello i am screen"

	}
};

tasks.register('css-init') {	
    doLast {

		def inputFile = new File("pp-style.json")

		def json = new JsonSlurper().parseText(inputFile.text)

		def config_screen =  json.containsKey("screen");

		def config_property = json.containsKey("property");

		if ( config_screen ) {

			def newFile = new File("master/screen.scss")
			newFile.createNewFile()
			String cadena = '$screen:(\n';

			json.screen.eachWithIndex { name, item , index ->

				println "-------------------------------"
				println name
				println item
				println index
				println json.screen
				println "-------------------------------"
				cadena += '	'+name+':max:200px,\n'

			}
			cadena += ');';
			newFile.write( cadena );


			/*
			for( (_screen,i) in json.screen) {

				newFile.write('$screen_'+_screen+':(max,min)');

			}*/

			println 'Existe una configuracion para screen'
		}


		if(  config_property ){

			println ' hay propiedades '

		}


    	println 'Done'
    }
}

task letterSpacing( type:Exec ){
	commandLine 'sass','--no-source-map','master/text/letter-spacing.scss','dist/text/letter-spacing.min.css'//,'--style','compressed'
}
task textAlign(type:Exec){
	commandLine 'sass','--no-source-map','master/text/text-align.scss','dist/text/text-align.min.css'//,'--style','compressed'	
}
task spacing(type:Exec){
	commandLine 'sass','--no-source-map','master/text/spacing.scss','dist/text/spacing.min.css'//,'--style','compressed'
}
task textTransform(type:Exec){
	commandLine 'sass','--no-source-map','master/text/text-transform.scss','dist/text/text-transform.min.css'//,'--style','compressed'
}
task lineHeight(type:Exec){
	commandLine 'sass','--no-source-map','master/text/line-height.scss','dist/text/line-height.min.css'//,'--style','compressed'
}

task allText(type:Exec){
	commandLine 'sass','--no-source-map','master/text/all.scss','dist/text/all.min.css'//,'--style','compressed'
}
